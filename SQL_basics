CREATE TABLE employee(
    emp_id INT PRIMARY KEY,
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_date DATE,
    sex VARCHAR(1),
    salary INT,
    branch_id INT,
    super_id INT
);

CREATE TABLE branch(
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT,
    mgr_start_date DATE,
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE sales(
    emp_id INT,
    client_id INT,
    total_sales INT,
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id)
);

CREATE TABLE client(
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id)
);

ALTER TABLE sales
ADD FOREIGN KEY(client_id)
REFERENCES client(client_id)
ON DELETE SET NULL;

ALTER TABLE branch
ADD FOREIGN KEY(mgr_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

-- INSERTING EMPLOYEE DATA
INSERT INTO employee VALUES(
    100,
    'Jan',
    'Levon',
    '1961-05-11',
    'F',
    110000,
    NULL,
    NULL
    );

INSERT INTO employee VALUES(
    101,
    'Mich',
    'Scott',
    '1964-03-15',
    'M',
    75000,
    NULL,
    NULL
);

-- INSERTING BRANCH DATA
INSERT INTO branch VALUES(
    1,
    'Amersfoort',
    100,
    '2006-02-09'
);

-- UPDATING EMPLOYEE TABLE
UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;


-- Find All Employees
SELECT * FROM employees;

-- Find ALL Employees Ordered by Salary
SELECT * FROM employees ORDER BY salary DESC;

-- Find ALL Employees Orderd by Sex and then name
SELECT * employees ORDER by sex,first_name,last_name;

-- Find the first 5 employees in the table
SELECT * FROM employees LIMIT 5;

-- Find first and last names of all employees
SELECT first_name,last_name FROM employees;

-- Find First and last name of all employees, but change the column names on return
SELECT first_name AS forname, last_name AS surname 
FROM employees;

-- Find out all all the different genders
SELECT DISTINCT sex FROM employees;

-- SQL FUNCTIONS

-- Find the number of employees
SELECT count(emp_id) FROM employees;

-- Find the number of female employees born after 1970
SELECT count(emp_id) 
FROM employees
WHERE sex = 'F' AND brith_date > '1970-01-01';

-- Find the average of all employee salaries
SELECT AVG(salary)
FROM employees;

-- Find the sum of all employee salaries
SELECT SUM(salary)
FROM employees;

-- Find out how many males and females there are
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

-- Find the total sales of each salesman
SELECT SUM(total_sales),emp_id
FROM works_with
GROUP BY emp_id;

-- WILDCARDS (% = any # characters), ( _ = one character)

-- Find any client's who are an LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC';

-- Find any branch suppliers who are in the label business
SELECT * 
FROM branch_supplier
WHERE supplier_name LIKE '% Label%';

-- Find any employee bron in October
SELECT * 
FROM employees
WHERE birth_date LIKE '____-10%';

-- Find any clients who are schools
SELECT *
FROM client
WHERE client_name LIKE '%school%';

-- UNION STATEMENTS 
-- Find a list of employee and branch names
-- Rule: must have the same number of columns and data types
-- You can change the header with AS
SELECT first_name AS company_names
FROM employees
UNION
SELECT branch_name 
FROM branch;

-- Find a list of all clients & branch suppliers' names
SELECT client_name, client.branch_id FROM client
UNION
SELECT branch_name, branch_supplier.branch_id FROM branch_supplier;

-- Find a list of all money spent or earned by the company
SELECT salary FROM employees
UNION
SELECT total_sales FROM works_with;


-- JOIN STATEMENTS
-- This will only return instances where the ON requirement is met.
-- Known as a inner Join
SELECT employees.emp_id, employees.first_name, branch.branch_name
FROM employees
JOIN branch
ON employee.emp_id = branch.mgr_id

-- With LEFT JOIN you display all the rows of the first table, even if the ON requirement is not met.
SELECT employees.emp_id, employees.first_name, branch.branch_name
FROM employees
LEFT JOIN branch
ON employee.emp_id = branch.mgr_id

-- With RIGHT JOIN you display all the rows of the second table, even if the ON requirement is not met. 
SELECT employees.emp_id, employees.first_name, branch.branch_name
FROM employees
LEFT JOIN branch
ON employee.emp_id = branch.mgr_id

-- NESTED QUERIES
-- Find names of all employees who have sold over 30,000 to a single client
SELECT employees.first_name, employees.last_name
FROM employees
WHERE employee.emp_id IN (
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
);

-- Find all clients who are handled by the branch that Michael Scott Manages
-- Assume you know Michael's ID

SELECT client_name FROM client
WHERE branch_id = (
    SELECT branch_id 
    FROM branch
    WHERE branch.mgr_id = 102 
    LIMIT 1
);


-- ON DELETE
  -- Normally used when removing data effects the Primary Key in a Table
-- Delete employee from database
-- This delete the entire row
DELETE FROM employee
WHERE emp_id = 102;

-- TRIGGERS
 -- If some code gets executed, do something else
 -- Triggers will need to be done in the terminal
 -- The delimiter is the stop sign. If we require more than 1 stop sign, we need to change the delimiter
DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUE('added new employee');
    END$$
DELIMITER;

-- logging the NEW row's first_name to the my_trigger table.
DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUE(NEW.first_name);
    END$$
DELIMITER;

-- 
DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        IF NEW.sex = 'M' THEN
            INSERT INTO trigger_test VALUES('added male employee');
        ELSEIF
            INSERT INTO trigger_test VALUES('added female');
        ELSE
            INSERT INTO trigger_test VALUES('added other employee');
        END IF;
    END$$
DELIMITER;
